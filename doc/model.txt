Model - All about database:

python manage.py makemigrations flatmates
python manage.py sqlmigrate flatmates 0001
python manage.py migrate

Example:

from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)


Add the module containing model.py to INSTALLED_APPS to tell the django about the existence of your models. Run 'manage.py migrate' to create the tables for your model.

SQL query generated for above model:

CREATE TABLE myapp_person (
    "id" serial NOT NULL PRIMARY KEY,
    "first_name" varchar(30) NOT NULL,
    "last_name" varchar(30) NOT NULL
);

To generate personalized Table name and other options, use meta options:

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

    def Meta:
        ordering = ["first_name",c"[last_name]]
        db_table = person

class Jobs(models.Model):
    employee = models.ForeignKey(Person, on_delete=models.cascade)
    company = models.CharField(max_length=100)
    join_date = models.DateField()
    experience = models.IntegerField()

 Other available fields:
 BigIntegerField
 BinaryField
 BooleanField
 CommaSeparatedIntegerField
 DateTimeField
 DecimalField
 DurationField
 EmailField
 FileField
    upload = models.FileField(upload_to='uploads/')
 FloatField
 ImageField
 GenericIPAddressField
 PositiveIntegerField
 TextField
 TimeField
 URLField
 ManytoManyField (same as ForeignKey except Many to One relationship)
 OnetoOneField ( same as ForeignKey except Many to One relationship )

 Field Options:
 null: If True, Django will store empty values as NULL in the database. Default is False.
 blank: If True, field is allowed to be blank or have data. Default is false. This option is validated-related unlike null which is purely database related. If false, it's required field. It's validation will be carried by form package.
 choices: Tuple is used. It's helpful to store big data fields with small choices and retrieve the actual value using tuple.
    Ex: L:Large, S:small. Only L and S will be stored in database.


SQL query for userProfile Model:
BEGIN;
--
-- Create model userProfile
--
CREATE TABLE "flatmates_userprofile" ("user_ID_id" integer NOT NULL PRIMARY KEY, "joining_date" date NOT NULL, "company" varchar(100) NOT NULL);
ALTER TABLE "flatmates_userprofile" ADD CONSTRAINT "flatmates_userprofile_user_ID_id_1b3f1300_fk_auth_user_id" FOREIGN KEY ("user_ID_id") REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED;

COMMIT;

SQL query for Expenses:

BEGIN;
--
-- Create model Expenses
--
CREATE TABLE "flatmates_expenses" ("id" serial NOT NULL PRIMARY KEY, "expense" varchar(100) NOT NULL, "spent_amount" integer NOT NULL, "spent_date" date NOT NULL, "description" text NOT NULL, "user_id_id" integer NOT NULL);
ALTER TABLE "flatmates_expenses" ADD CONSTRAINT "flatmates_expenses_user_id_id_86d3e975_fk_auth_user_id" FOREIGN KEY ("user_id_id") REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "flatmates_expenses_18624dd3" ON "flatmates_expenses" ("user_id_id");

COMMIT;


 <link rel = "stylesheet" type="text/css" href="{% static 'flatmates/centre.css' %}" />
